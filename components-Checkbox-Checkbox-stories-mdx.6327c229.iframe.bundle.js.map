{"version":3,"file":"components-Checkbox-Checkbox-stories-mdx.6327c229.iframe.bundle.js","mappings":";AAIA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACsBA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;;;;ACvEA;;;;;;;ACIA;;AAIA;;;;AAIA;AACA;;;;AAYA;AAGA;AALA;;AAQA;AAGA;AACA;;;;;;AAOA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAIA;;;;;;;;;;;;;;;AAeA;;AAIA;AACA;AACA;;AAIA;;AAIA;;AAEA;AAGA;AACA;;AAEA","sources":["webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/outlineStyle.ts","webpack://@lokalise/louis/./src/components/Checkbox/Checkbox.styles.tsx"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: SvgIconColor;\n    fill?: SvgIconColor;\n    stroke?: SvgIconColor;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: SvgIconColor | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","import { css } from '../styled';\nimport { color } from '../theme';\n\nexport const outlineStyle = css`\n    outline-width: 2px !important;\n    outline-style: solid !important;\n    outline-color: ${color('primary.500')} !important;\n    outline-color: -webkit-focus-ring-color !important;\n    outline-offset: 1px !important;\n`;\n","import { css, styled } from '../../utils/styled';\nimport { outlineStyle } from '../../utils/styles';\nimport { color, fontFamily, modifier, spacing, typography } from '../../utils/theme';\nimport { CheckboxCheckedFilled } from './icons/CheckboxCheckedFilled';\nimport { CheckboxEmpty } from './icons/CheckboxEmpty';\n\nexport const Container = styled.div`\n    position: relative;\n    display: grid;\n    grid-auto-flow: row;\n    gap: ${spacing(1)};\n    width: 100%;\n`;\n\nexport const Label = styled.label`\n    display: grid;\n    grid-template-columns: min-content;\n    grid-auto-flow: column;\n    gap: ${spacing(1)};\n    font-family: ${fontFamily('default')};\n\n    /* Required because of global styles applied by bootstrap */\n    margin: 0;\n`;\n\nexport interface CheckboxIconProps {\n    checked?: boolean;\n}\n\nexport const iconSize = '20px';\n\nexport const CheckboxDefault = styled.svg.attrs<CheckboxIconProps>(({ checked }) => ({\n    as: checked ? CheckboxCheckedFilled : CheckboxEmpty,\n}))<CheckboxIconProps>`\n    stroke: ${color('content.secondary')};\n    font-size: ${iconSize};\n\n    ${modifier(\n        'checked',\n        css`\n            color: ${color('primary.500')};\n            stroke: ${color('primary.500')};\n            path {\n                stroke: none;\n            }\n        `,\n    )};\n\n    ${Container}:hover &,\n    [data-dev-state='hover'] & {\n        color: ${color('interactive.primary.hover')};\n        stroke: ${color('interactive.primary.hover')};\n    }\n    ${Container}:active &,\n    [data-dev-state='active'] & {\n        color: ${color('interactive.primary.pressed')};\n        stroke: ${color('interactive.primary.pressed')};\n    }\n`;\n\nexport const Input = styled.input`\n    && {\n        // increases the specificity of the selector to solve the problem with conflicting styles from Bootstrap.\n        position: absolute !important; // !important is necessary because it conflicts with bootstrap styles.\n        opacity: 0;\n        outline: none;\n    }\n\n    /*\n    * This is a temporary solution to have a full keyboard support for Checkbox in the Lokalise app.\n    * \"focusOutlineVisibilityClassName\" can be set on \"body\" tag to indicate whether\n    * user is using keyboard to navigate a page. Focus outline is only visible when user is using \n    * keyboard. This behavior matches native radio behavior.\n    */\n    .lokalise-ui_focus_outline_should_be_visible &:focus + svg {\n        ${outlineStyle}\n    }\n`;\n\nexport const Text = styled.span`\n    ${typography('description')};\n    color: ${color('content.primary')};\n    cursor: default;\n`;\n\nexport const MultiCheckboxContainer = styled.div`\n    width: 100%;\n`;\n\nexport const MultiCheckbox = styled.div`\n    display: grid;\n    gap: ${spacing(3)};\n`;\n\nexport const MultiCheckboxErrorContainer = styled.div`\n    padding-top: ${spacing(3)};\n    display: grid;\n    gap: ${spacing(1)};\n`;\n"],"names":[],"sourceRoot":""}